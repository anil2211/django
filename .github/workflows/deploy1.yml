name: CI/CD Pipeline for Python Django Project

on: workflow_dispatch
#   push:
#     branches:
#       - main  # Trigger on push to the main branch
#   pull_request:
#     branches:
#       - main  # Trigger on pull request to the main branch

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    # Checkout the repository code
    - name: Checkout repository
      uses: actions/checkout@v3

    # Set up Python and install dependencies
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'  # You can change this to your desired Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install django

    # Set up SSH for EC2 connection
    # - name: Set up SSH key for EC2
    #   run: |
    #     mkdir -p ~/.ssh
    #     echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
    #     chmod 600 ~/.ssh/id_rsa
    #     ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    # # Deploy to EC2
    # - name: Deploy to EC2
    #   run: |
    #     ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
    #       cd /path/to/your/project  # Navigate to your Django project directory on EC2
    #       git pull origin main  # Pull the latest changes from the repository
    #       source /path/to/your/virtualenv/bin/activate  # Activate virtual environment (if using)
    #       pip install -r requirements.txt  # Install any new dependencies
    #       python manage.py migrate  # Run database migrations (for Django projects)
    #       python manage.py collectstatic --noinput  # Collect static files (for Django projects)
    #       systemctl restart gunicorn  # Restart Gunicorn service (if using Gunicorn)
    #       systemctl restart nginx  # Restart Nginx (if using Nginx)
    #     EOF
